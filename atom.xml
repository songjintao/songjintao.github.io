<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宋金涛博客</title>
  <subtitle>宋金涛Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.geekap.com/"/>
  <updated>2018-02-25T11:18:50.060Z</updated>
  <id>http://blog.geekap.com/</id>
  
  <author>
    <name>宋金涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://blog.geekap.com/2018/02/25/React%20+%20Nodejs%20+%20Mongodb%20%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.geekap.com/2018/02/25/React + Nodejs + Mongodb 全栈开发笔记/</id>
    <published>2018-02-25T10:35:29.107Z</published>
    <updated>2018-02-25T11:18:50.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-创建React项目骨架模板"><a href="#一、-创建React项目骨架模板" class="headerlink" title="一、 创建React项目骨架模板"></a>一、 创建React项目骨架模板</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create-react-app projectName</div></pre></td></tr></table></figure>
<h2 id="二、-运行React项目，并修改"><a href="#二、-运行React项目，并修改" class="headerlink" title="二、 运行React项目，并修改"></a>二、 运行React项目，并修改</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run <span class="built_in">start</span></div></pre></td></tr></table></figure>
<h2 id="三、-后端-Express"><a href="#三、-后端-Express" class="headerlink" title="三、 后端-Express"></a>三、 后端-Express</h2><ol>
<li><p>安装express</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i express --save</div></pre></td></tr></table></figure>
</li>
<li><p>建立server文件夹及server.js文件<br> 引入express并运行</p>
</li>
<li><p>安装nodemon (修改node文件自动重启服务)</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i nodemon -g</div></pre></td></tr></table></figure>
</li>
<li><p>运行node项目<br>进入server文件夹运行 <code>nodemon server</code> 修改server文件查看效果</p>
</li>
</ol>
<h2 id="四、-数据库-mongodb"><a href="#四、-数据库-mongodb" class="headerlink" title="四、 数据库-mongodb"></a>四、 数据库-mongodb</h2><ol>
<li><p><a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="external">下载Mongodb</a></p>
</li>
<li><p>运行 Mongodb(要保持运行状态 否则无法连接)</p>
</li>
</ol>
<p>进入mongodb安装目录的etc目录运行下列命令</p>
<p>指定数据的存放目录并启动 需手动建立<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.\mongod --dbpath "H:\mongodb\data\db"</div></pre></td></tr></table></figure></p>
<p>测试连接-继续在etc目录执行<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.\mongo</div></pre></td></tr></table></figure></p>
<h2 id="五、-数据库驱动"><a href="#五、-数据库驱动" class="headerlink" title="五、 数据库驱动"></a>五、 数据库驱动</h2><ol>
<li><p>安装mongoose</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i mongoose --save</div></pre></td></tr></table></figure>
</li>
<li><p>引入并连接数据库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="comment">// 连接mongo</span></div><div class="line"><span class="keyword">const</span> DB_URL = <span class="string">"mongodb://localhost:27017"</span></div><div class="line">mongoose.connect(DB_URL)</div><div class="line">mongoose.connection.on(<span class="string">'connected'</span>, ()=&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"****************mongo connect success**************"</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>建立数据模型 model</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'user'</span>, <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">user</span>: &#123;<span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">require</span>: <span class="literal">true</span>&#125;,</div><div class="line">    <span class="attr">age</span>: &#123;<span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">require</span>: <span class="literal">true</span>&#125;</div><div class="line">&#125;))</div></pre></td></tr></table></figure>
</li>
<li><p>增删改查</p>
</li>
</ol>
<p><strong>增</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">"/create"</span>, (req, res)=&gt; &#123;</div><div class="line">    User.create(&#123;</div><div class="line">        <span class="attr">user</span>: <span class="string">"sjt"</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">21</span></div><div class="line">    &#125;, (err, doc)=&gt; &#123;</div><div class="line">        <span class="keyword">if</span>(!err) &#123;</div><div class="line">            <span class="built_in">console</span>.log(doc)</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(err)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>删</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">"/remove"</span>, (req, res)=&gt; &#123;</div><div class="line">    User.remove(&#123;<span class="attr">age</span>:<span class="number">21</span>&#125;, (err, doc)=&gt; &#123;</div><div class="line">        res.send(doc)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>改</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">"/update"</span>,(req, res)=&gt; &#123;</div><div class="line">    User.update(&#123;<span class="string">"user"</span>: <span class="string">"sjt"</span>&#125;,&#123;<span class="string">"$set"</span>: &#123;<span class="attr">age</span>: <span class="number">18</span>&#125;&#125;, (err, doc)=&gt; &#123;</div><div class="line">        res.send(doc)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>查</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">"/find"</span>, (req, res)=&gt; &#123;</div><div class="line">    User.find(&#123;&#125;, (err,doc)=&gt; &#123;</div><div class="line">        res.json(doc)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-创建React项目骨架模板&quot;&gt;&lt;a href=&quot;#一、-创建React项目骨架模板&quot; class=&quot;headerlink&quot; title=&quot;一、 创建React项目骨架模板&quot;&gt;&lt;/a&gt;一、 创建React项目骨架模板&lt;/h2&gt;&lt;figure class=&quot;hi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue之父与子间的通信</title>
    <link href="http://blog.geekap.com/2017/03/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.geekap.com/2017/03/08/Vue学习笔记/</id>
    <published>2017-03-08T10:25:20.000Z</published>
    <updated>2017-03-28T16:36:40.540Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<p><center><img src="http://upyun.geekap.com/ornament/dongtu1.gif" alt="动图"></center></p>
<h2 id="一、父组件向子组件传递信息"><a href="#一、父组件向子组件传递信息" class="headerlink" title="一、父组件向子组件传递信息:"></a>一、父组件向子组件传递信息:</h2><p><strong>(1)父组件</strong></p>
<p>1.在父模块的子组件标签上传递参数<code>CompontentA</code>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">compontent-a</span> <span class="attr">fromfather</span>=<span class="string">"I am father!"</span>&gt;</span><span class="tag">&lt;/<span class="name">compontent-a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.使用import引入子组件<br>3.使用compontents注册子组件<code>components: { CompontentA }</code></p>
<p><strong>(2)子组件</strong></p>
<p>1.在子组件中通过props接收父组件传递来的数据<code>props: [&#39;fromfather&#39;]</code>。<br>2.在子组件内通过<code>this.fromfather</code>访问。</p>
<h2 id="二、子组件向父组件传递信息"><a href="#二、子组件向父组件传递信息" class="headerlink" title="二、子组件向父组件传递信息:"></a>二、子组件向父组件传递信息:</h2><p><strong>(1)子组件</strong></p>
<p>1.在子组件中触发clickMe函数时通过emit发送数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">clickMe () &#123;</div><div class="line">	<span class="keyword">this</span>.$emit(<span class="string">'sonToFather'</span>, <span class="keyword">this</span>.msg1)<span class="comment">//1.第一个参数是父组件中自定义的事件类型。2.第二个参数是子组件中要发送的数据。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>(2)父组件</strong></p>
<p>1.在父模块的子组件标签上自定义事件类型和自定义事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">compontent-a</span> <span class="attr">v-on:sonToFather</span>=<span class="string">"listenSon"</span>&gt;</span><span class="tag">&lt;/<span class="name">compontent-a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.使用import引入子组件<br>3.使用compontents注册子组件<code>components: { CompontentA }</code><br>4.可以在函数listenSon中直接使用从子组件传递来的数据<code>msg</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">listenSon(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(msg)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Vue中父与子、子与父组件之间如何传递消息呢?接下来为您揭秘…&lt;br&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.geekap.com/categories/Vue/"/>
    
    
      <category term="教程" scheme="http://blog.geekap.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Vue" scheme="http://blog.geekap.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>React-Native开发流程</title>
    <link href="http://blog.geekap.com/2017/02/22/React-Native%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.geekap.com/2017/02/22/React-Native开发流程/</id>
    <published>2017-02-22T09:05:55.000Z</published>
    <updated>2017-04-01T12:02:50.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h2 id="React-Native官方的介绍"><a href="#React-Native官方的介绍" class="headerlink" title="React-Native官方的介绍:"></a><strong>React-Native官方的介绍:</strong></h2><ul>
<li><p>React Native使你能够在Javascript和React的基础上获得完全一致的开发体验，构建世界一流的原生APP。</p>
</li>
<li><p>React Native着力于提高多平台开发的开发效率 —— 仅需学习一次，编写任何平台。(Learn once, write anywhere)。</p>
</li>
<li><p>Facebook已经在多项产品中使用了React Native，并且将持续地投入建设React Native。</p>
</li>
</ul>
<center><img src="http://upyun.geekap.com/ornament/dongtu1.gif" alt="动图"></center>

<h2 id="接下来为大家奉上开发React-Native应用的流程。"><a href="#接下来为大家奉上开发React-Native应用的流程。" class="headerlink" title="接下来为大家奉上开发React-Native应用的流程。"></a>接下来为大家奉上开发React-Native应用的流程。</h2><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a><strong>开发环境</strong></h2><ul>
<li>windows 10 专业版 1607</li>
<li>Node 7.3.0</li>
<li>Android Studio 1.5</li>
<li>Java Development Kit 1.8.0_73</li>
<li>Python 3.6</li>
</ul>
<h2 id="一、-首先安装-react-native-cli"><a href="#一、-首先安装-react-native-cli" class="headerlink" title="一、 首先安装 react-native-cli"></a><strong>一、 首先安装 <code>react-native-cli</code></strong></h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g yarn react-native-cli</div></pre></td></tr></table></figure>
<h2 id="二、-测试安装-Project在这里代指工程目录名-可自行设定，最好为纯英文目录-。"><a href="#二、-测试安装-Project在这里代指工程目录名-可自行设定，最好为纯英文目录-。" class="headerlink" title="二、 测试安装(Project在这里代指工程目录名,可自行设定，最好为纯英文目录)。"></a><strong>二、 测试安装(<code>Project</code>在这里代指工程目录名,可自行设定，最好为纯英文目录)。</strong></h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">react-native init Project</div><div class="line"></div><div class="line"><span class="built_in">cd</span> Project</div><div class="line"></div><div class="line">react-native run-android</div></pre></td></tr></table></figure>
<p><strong>有时运行上述代码后Packager可能不会自动运行，或者运行过程中断，这时运行以下代码:</strong></p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native <span class="built_in">start</span></div></pre></td></tr></table></figure>
<h2 id="三、-现在你已经成功运行了项目，我们可以开始尝试动手改一改了："><a href="#三、-现在你已经成功运行了项目，我们可以开始尝试动手改一改了：" class="headerlink" title="三、 现在你已经成功运行了项目，我们可以开始尝试动手改一改了："></a><strong>三、 现在你已经成功运行了项目，我们可以开始尝试动手改一改了：</strong></h2><ul>
<li><p>把<code>Project\android\app\build\outputs\apk</code>目录中生成的APP安装到安卓虚拟机或者手机中</p>
</li>
<li><p>在安卓模拟器OR你的手机App中设置IP后就可以看到效果了</p>
<p>  <strong>打开APP后通过 手机摇一摇 或者 点击设置建，调出如下图设置菜单，点击<code>Dev Settings</code>选项。</strong></p>
<center><img src="http://oj5xzgnkr.bkt.clouddn.com/blog_170222_01.jpg" alt="图"></center>

<p>  <strong>进入设置页面，点击<code>Debug server host</code>选项，输入 <code>YouIP:8081</code>保存到主页面菜单再点击<code>Reload</code>即可。</strong></p>
<center><img src="http://oj5xzgnkr.bkt.clouddn.com/blog_170222_02.jpg" alt="图"></center>
</li>
<li><p>使用你喜欢的代码编辑器打开index.android.js并随便改上几行,并在APP中<code>Reload</code>即可看到页面效果。</p>
</li>
</ul>
<h2 id="四、-接下来就是开发过程需要注意的"><a href="#四、-接下来就是开发过程需要注意的" class="headerlink" title="四、 接下来就是开发过程需要注意的"></a><strong>四、 接下来就是开发过程需要注意的</strong></h2><ul>
<li><p>逻辑代码使用ES6语法。</p>
</li>
<li><p>页面使用FlexBox布局。</p>
</li>
<li><p>若想将图片打包到app内，需要将文件放到 <code>Project\android\app\src\main\res\drawable-xhdpi</code> 目录下，<br>  并且引用的时候在Image加上source属性</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source=&#123;&#123;<span class="attr">uri</span>:<span class="string">'文件名'</span>&#125;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="五、-把制作完成的APP打包"><a href="#五、-把制作完成的APP打包" class="headerlink" title="五、 把制作完成的APP打包"></a><strong>五、 把制作完成的APP打包</strong></h2><p>测试版打包:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-android</div></pre></td></tr></table></figure></p>
<p>正式版打包:(需要设置签名)</p>
<ol>
<li><p>切换到react-native工程根目录，先生成秘钥文件</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize <span class="number">2048</span> -validity <span class="number">10000</span></div></pre></td></tr></table></figure>
</li>
<li><p>需要把刚生成的秘钥文件copy到android/app下</p>
</li>
<li><p>修改android/gradle.properties, 在最后面添加如下内容:</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</div><div class="line">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</div><div class="line">MYAPP_RELEASE_STORE_PASSWORD=<span class="number">123456</span> //刚才生成秘钥时设置的密码</div><div class="line">MYAPP_RELEASE_KEY_PASSWORD=<span class="number">123456</span>     //刚才生成秘钥时设置的密码</div></pre></td></tr></table></figure>
</li>
<li><p>在 android/app/build.gradle文件里面修改</p>
<center><img src="http://oj5xzgnkr.bkt.clouddn.com/blog_170222_03.png" alt="图"></center>

</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">    release &#123;</div><div class="line">        storeFile <span class="keyword">file</span>(MYAPP_RELEASE_STORE_FILE)</div><div class="line">        storePassword MYAPP_RELEASE_STORE_PASSWORD</div><div class="line">        keyAlias MYAPP_RELEASE_KEY_ALIAS</div><div class="line">        keyPassword MYAPP_RELEASE_KEY_PASSWORD</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        minifyEnabled enableProguardInReleaseBuilds</div><div class="line">        proguardFiles getDefaultProguardFile(<span class="string">"proguard-android.txt"</span>), <span class="string">"proguard-rules.pro"</span></div><div class="line">        signingConfig signingConfigs.release</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>在项目根目录输入(服务开启情况下)</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl "http://localhost:<span class="number">8081</span>/index.android.bundle" &gt; android/app/src/main/assets/index.android.bundle</div></pre></td></tr></table></figure>
</li>
<li><p>启动代码混淆<br>Proguard 是一个 Java 字节码混淆压缩工具，可剔除项目文件夹中未使用的部分，有效减少APK的大小。在 build.gradle 文件中，启动 Proguard模块:</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">def enableProguardInReleaseBuilds = true</div></pre></td></tr></table></figure>
</li>
<li><p>修改app图标<br>将制作好的图标放入<code>android/app/src/res/drawable***/</code></p>
</li>
<li><p>app名称修改<br>在<code>android/app/src/main/res/values/string.xml</code>中修改</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>唯品购<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入Android目录并开始打包</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> android</div><div class="line"></div><div class="line">.\gradlew assembleRelease</div></pre></td></tr></table></figure>
</li>
<li><p>打包完成<br>进入<code>Project\android\app\build\outputs\apk</code>目录即可看到打包好的<code>app-release.apk</code>文件。</p>
</li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过几天的奋战，终于把制作并打包了个RN-APP,现在把制作以及打包流程简单介绍给大家。&lt;br&gt;
    
    </summary>
    
      <category term="React-Native" scheme="http://blog.geekap.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://blog.geekap.com/tags/React-Native/"/>
    
      <category term="教程" scheme="http://blog.geekap.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Android" scheme="http://blog.geekap.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Ionic开发流程</title>
    <link href="http://blog.geekap.com/2017/02/09/ionic%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    <id>http://blog.geekap.com/2017/02/09/ionic开发日志/</id>
    <published>2017-02-09T12:10:20.000Z</published>
    <updated>2017-04-01T12:05:38.101Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h2 id="Ionic官方的介绍"><a href="#Ionic官方的介绍" class="headerlink" title="Ionic官方的介绍:"></a>Ionic官方的介绍:</h2><p><strong>Ionic(ionicframework)一款接近原生的Html5移动App开发框架　会html css js就可以开发app　创建精彩的应用 从这里开始。</strong></p>
<center><img src="http://upyun.geekap.com/ornament/dongtu1.gif" alt="动图"></center>

<h2 id="接下来为大家奉上开发Ionic应用的流程。"><a href="#接下来为大家奉上开发Ionic应用的流程。" class="headerlink" title="接下来为大家奉上开发Ionic应用的流程。"></a>接下来为大家奉上开发Ionic应用的流程。</h2><p>1.安装java jdk运行环境并<a href="http://jingyan.baidu.com/article/f96699bb8b38e0894e3c1bef.html" target="_blank" rel="external">配置环境变量</a>;<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在命令窗口分别输入`java`和`javac` 验证安装配置状态</div></pre></td></tr></table></figure></p>
<p>2.<a href="http://jingyan.baidu.com/article/ad310e80a9328a1849f49e30.html" target="_blank" rel="external">安装Android Studio</a>并配置环境变量;<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在命令窗口分别输入`android`和`adb` 验证安装配置状态</div></pre></td></tr></table></figure></p>
<p>3.在全英文路径的目录里输入以下命令:</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ionic <span class="built_in">start</span> myapp tabs 使用这个命令创建一个App工程</div><div class="line"></div><div class="line">ionic serve 使用这个命令启动应用，会自动在浏览器中打开应用</div><div class="line"></div><div class="line">ionic platform add android或者ionic platform add ios 这个命令是为工程添加平台编译选项</div><div class="line"></div><div class="line">ionic build android或者ionic build ios 进行编译</div></pre></td></tr></table></figure>
<p>4.之后会在 <code>prj\platforms\android\build\outputs\apk</code> 目录下看到已经编译完成的apk文件，把他装到虚拟机或者手机上就可以看到效果了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过今天无数的踩坑，终于使用Ionic成功编译出一个安卓Demo应用。&lt;br&gt;
    
    </summary>
    
      <category term="Ionic" scheme="http://blog.geekap.com/categories/Ionic/"/>
    
    
      <category term="教程" scheme="http://blog.geekap.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Android" scheme="http://blog.geekap.com/tags/Android/"/>
    
      <category term="Ionic" scheme="http://blog.geekap.com/tags/Ionic/"/>
    
  </entry>
  
  <entry>
    <title>tranquilpeak主题的配置</title>
    <link href="http://blog.geekap.com/2017/01/07/tranquilpeak%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.geekap.com/2017/01/07/tranquilpeak主题的配置/</id>
    <published>2017-01-07T09:12:21.000Z</published>
    <updated>2017-02-09T12:26:22.198Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<p><center><img src="http://upyun.geekap.com/ornament/dongtu1.gif" alt="动图"></center><br><strong>之前讲了如何利用Hexo在github上建立blog,以及如何更换主题，步骤并不复杂，但是配置主题可是就没那么简单了，博主在配置的过程中遇到了许许多多的问题，网上查阅了大量的资料，重新配置几次，还好最终被博主征服了.</strong></p>
<hr>
<div class="alert info no-icon"><h4 id="一、个性化配置"><a href="#一、个性化配置" class="headerlink" title="一、个性化配置"></a><strong>一、个性化配置</strong></h4></div>
<p><strong>1.头像:</strong><br>在主题的<code>_config.yml</code>文件内设置<code>picture</code>属性</p>
<p><strong>2.地址信息:</strong><br>在主题的<code>_config.yml</code>文件内设置<code>location</code>属性</p>
<p><strong>3.弹出框和侧栏的简介:</strong><br>主题目录的<code>layout/_partial/sidebar.ejs</code>和<code>about.ejs</code>文件，只修改markdown括号引号内的信息即可。<br>sidebar.ejs文件</p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">sidebar.ejs</a><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (__(<span class="string">'author.bio'</span>)) { %&gt;</span><br><span class="line">    &lt;h5 class="sidebar-profile-bio"&gt;&lt;%- markdown(__('一只热爱探索，热爱生活的快乐小极客(๓´˘`๓)')) %&gt;&lt;/h5&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>about.ejs文件</p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">about.ejs</a><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (__(<span class="string">'author.bio'</span>)) { %&gt;</span><br><span class="line">    &lt;div id="about-card-bio"&gt;&lt;%- markdown(__('一只热爱探索，热爱生活的快乐小极客(๓´˘`๓)')) %&gt;&lt;/div&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p><strong>4.职业信息:</strong><br>主题目录的<code>layout/_partial/about.ejs</code></p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">about.ejs</a><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (__(<span class="string">'author.job'</span>)) { %&gt;</span><br><span class="line">    &lt;div id="about-card-job"&gt;</span><br><span class="line">        &lt;i class="fa fa-briefcase"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;%- markdown(__('前端工程师')) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p><strong>5.名字:</strong><br>根目录的<code>_config.yml</code>文件修改<code>author</code>即可。<br><div class="alert info no-icon"><h4 id="二、功能增强"><a href="#二、功能增强" class="headerlink" title="二、功能增强"></a><strong>二、功能增强</strong></h4></div><br><strong>1.配置分类、标签、存档:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$  hexo new page <span class="string">"all-categories"</span></div><div class="line"></div><div class="line">$  hexo new page <span class="string">"all-tags"</span></div><div class="line"></div><div class="line">$  hexo new page <span class="string">"all-archives"</span></div></pre></td></tr></table></figure>
<p>eg:<br>修改生成的三个模板文件<code>source/all-tags/index.md</code></p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">index.md</a><ul class="tabs"><li class="tab active">markdown</li></ul></figcaption><div class="tabs-content"><figure class="highlight markdown" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: "all-tags"</span><br><span class="line">layout: "all-tags"</span><br><span class="line"><span class="section">comments: false</span><br><span class="line">---</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p><strong>2.搜索</strong><br>此主题其实是内置了Algolia的，只需要简单配置下即可但是免费用户有限制。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  npm install hexo-algoliasearch --save</div></pre></td></tr></table></figure>
<p>在根目录的<code>_config.yml</code>文件内添加以下内容,将前三项换成自己的，需要去algolia官网注册。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">_config.yml</a><ul class="tabs"><li class="tab active">yml</li></ul></figcaption><div class="tabs-content"><figure class="highlight yml" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line"><span class="attr">  appId:</span> <span class="string">"Z7A3XW4R2I"</span></span><br><span class="line"><span class="attr">  apiKey:</span> <span class="string">"12db1ad54372045549ef465881c17e743"</span></span><br><span class="line"><span class="attr">  adminApiKey:</span> <span class="string">"40321c7c207e7f73b63a19aa24c4761b"</span></span><br><span class="line"><span class="attr">  chunkSize:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">  indexName:</span> <span class="string">"tranquilpeak"</span></span><br><span class="line"><span class="attr">fields:</span></span><br><span class="line"><span class="bullet">    -</span> title</span><br><span class="line"><span class="bullet">    -</span> date</span><br><span class="line"><span class="bullet">    -</span> permalink</span><br><span class="line"><span class="bullet">    -</span> thumbnailImageUrl</span><br><span class="line"><span class="bullet">    -</span> tags</span><br><span class="line"><span class="bullet">    -</span> categories</span><br><span class="line"><span class="bullet">    -</span> excerpt</span><br><span class="line"><span class="attr">    - excerpt:</span>strip</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p><strong>3.RSS</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>在根目录_config.yml文件内添加以下代码:</p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">_config.yml</a><ul class="tabs"><li class="tab active">yml</li></ul></figcaption><div class="tabs-content"><figure class="highlight yml" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">	type: atom</span><br><span class="line">	path: atom.xml</span><br><span class="line">	limit: <span class="number">20</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p><strong>4.侧栏添加新的项目</strong></p>
<p>在主题的<code>_config.yml</code>文件中 解注释 掉想要的功能。<br><div class="alert info no-icon"><h4 id="三、写文章"><a href="#三、写文章" class="headerlink" title="三、写文章"></a><strong>三、写文章</strong></h4></div><br><strong>1.显示摘要</strong></p>
<p>要想首页每篇文章只显示摘要需要在每篇文章的内容开始之前写上以下内容：</p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">title.md</a><ul class="tabs"><li class="tab active">markdown</li></ul></figcaption><div class="tabs-content"><figure class="highlight markdown" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是摘要内容--此方法只在首页显示摘要。</span><br><span class="line">&lt;!-- excerpt --&gt;</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>或者</p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">title.md</a><ul class="tabs"><li class="tab active">markdown</li></ul></figcaption><div class="tabs-content"><figure class="highlight markdown" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是摘要内容--此方法除了在首页显示摘要还会在文章页的文章最前面显示一遍。   </span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p><strong>2.文章的属性配置</strong></p>
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">title.md</a><ul class="tabs"><li class="tab active">markdown</li></ul></figcaption><div class="tabs-content"><figure class="highlight markdown" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">title: 博客建设分享及博客计划</span><br><span class="line">date: 2017-01-02 17:12:21</span><br><span class="line">categories: '建站'</span><br><span class="line">tags: ['计划','建站','Hexo']</span><br><span class="line">keywords:</span><br><span class="line"><span class="bullet">- </span>'博客'</span><br><span class="line"><span class="bullet">- </span>hexo</span><br><span class="line"><span class="bullet">- </span>'建站'</span><br><span class="line">clearReading: true  //在文章页隐藏侧栏，以更好地阅读。</span><br><span class="line">thumbnailImage: http://upyun.geekap.com/gitblog-img/car-6-140.jpg  //首页文章列表显示的缩略图</span><br><span class="line">thumbnailImagePosition: left  //缩略图显示的位置，上下左右都可以</span><br><span class="line">autoThumbnailImage: true  // 开启后如果没有设置缩略图，会自动设置为图片画廊里的第一张，或者其他文章的图。</span><br><span class="line">metaAlignment: center  //文章页图片上的文字居中显示</span><br><span class="line">coverImage: http://upyun.geekap.com/gitblog-img/cover-v1.2.0.jpg  //文章页最上面的那个大图</span><br><span class="line">coverCaption: "Hexo建站分享"  //大图下面的小标题</span><br><span class="line">coverMeta: in  //图片上的文字显示在图片上，或者显示在图片外面</span><br><span class="line">coverSize: full  //大图显示的尺寸，full是全屏展示</span><br><span class="line">comments: false  //评论功能是否开启</span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info no-icon"><h4 id="四、遇到的问题及解决方案"><a href="#四、遇到的问题及解决方案" class="headerlink" title="四、遇到的问题及解决方案: "></a><strong>四、遇到的问题及解决方案: </strong></h4></div>
<p><strong>1.设置头像后文章页面的左上角一直显示一张头像的原图，影响阅读。</strong></p>
<p>解决方法:</p>
<p>在主题目录的<code>layout/_partial/header.ejs</code>吧文件内唯一的的一个img删掉，1.9.1版本是在倒数第五行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前讲了如何利用Hexo在github上建立blog,以及如何更换主题，步骤并不复杂，但是配置主题可是就没那么简单了。&lt;br&gt;
    
    </summary>
    
      <category term="建站" scheme="http://blog.geekap.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="教程" scheme="http://blog.geekap.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="主题" scheme="http://blog.geekap.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="建站" scheme="http://blog.geekap.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Hexo" scheme="http://blog.geekap.com/tags/Hexo/"/>
    
      <category term="安装" scheme="http://blog.geekap.com/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7.3 安装 Nginx</title>
    <link href="http://blog.geekap.com/2017/01/06/CentOS%207%20%E5%AE%89%E8%A3%85%20Nginx/"/>
    <id>http://blog.geekap.com/2017/01/06/CentOS 7 安装 Nginx/</id>
    <published>2017-01-06T01:12:21.000Z</published>
    <updated>2017-01-07T09:13:32.768Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h2 id="为什么选择Nginx"><a href="#为什么选择Nginx" class="headerlink" title="为什么选择Nginx?"></a><strong>为什么选择Nginx?</strong></h2><p>Nginx 是一个很牛的高性能Web和反向代理服务器, 它具有很多非常优越的特性:</p>
<ul>
<li>在高连接并发的情况下，Nginx是Apache服务器不错的替代品</li>
<li>Nginx作为负载均衡服务器</li>
<li>作为邮件代理服务器</li>
<li>Nginx 是一个安装非常的简单 , 配置文件非常简洁还能够支持perl语法,Bugs非常少的服务器.</li>
</ul>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a><strong>测试环境</strong></h2><ul>
<li>windows 10 专业版 1607</li>
<li>VirtualBox 5.1.12 r112440 (Qt5.6.2)</li>
<li>CentOS release 7.3.1611</li>
<li>Nginx 1.11.8</li>
</ul>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a><strong>安装依赖</strong></h2><p>首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装:<br> <figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">依赖安装</a><ul class="tabs"><li class="tab active">nginx</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$   yum install gcc-c++</span><br><span class="line"></span><br><span class="line">$   yum install pcre pcre-devel </span><br><span class="line"></span><br><span class="line">$   yum install zlib zlib-devel  </span><br><span class="line"></span><br><span class="line">$   yum install openssl openssl--devel</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>或者简单点一起安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</div></pre></td></tr></table></figure></p>
<h2 id="源码方式安装Nginx"><a href="#源码方式安装Nginx" class="headerlink" title="源码方式安装Nginx"></a><strong>源码方式安装Nginx</strong></h2><p>首先进入/usr/local目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  <span class="built_in">cd</span> /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure></p>
<p>从官网下载最新版的nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   wget http://nginx.org/download/nginx-1.11.8.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压nginx压缩包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   tar -zxvf nginx-1.11.8.tar.gz</div></pre></td></tr></table></figure></p>
<p>会产生一个nginx-1.11.8 目录，这时进入nginx-1.11.8目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   <span class="built_in">cd</span>  nginx-1.11.8</div></pre></td></tr></table></figure></p>
<p>接下来安装，可以使用–prefix参数指定nginx安装的目录,make、make install安装<br><figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">Nginx安装</a><ul class="tabs"><li class="tab active">nginx</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$   ./configure   # 默认安装在/usr/local/nginx-1.11.8</span><br><span class="line"></span><br><span class="line">$   make  </span><br><span class="line"></span><br><span class="line">$   make install</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>或者用yum的方式安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  yum install -y nginx</div></pre></td></tr></table></figure></p>
<h2 id="配置防火墙-开启80端口"><a href="#配置防火墙-开启80端口" class="headerlink" title="配置防火墙 开启80端口"></a><strong>配置防火墙 开启80端口</strong></h2><p>nginx默认端口为80端口，但CentOS 7.2默认不开启80端口，需要手动添加80端口的权限。由于centos 7版本以后默认使用firewalld后，网上关于iptables的设置方法已经不管用了，所以根本就别想用配置iptables做啥，根本没用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   firewall-cmd --zone=public --add-port=80/tcp --permanent</div></pre></td></tr></table></figure></p>
<p>别忘了更新防火墙的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>重启nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a><strong>完成</strong></h2><p>打开浏览器访问Linux的IP，就可以看到 nginx的欢迎页了Welcome to nginx!</p>
<h2 id="可能用到的命令："><a href="#可能用到的命令：" class="headerlink" title="可能用到的命令："></a><strong>可能用到的命令：</strong></h2><p>查看ip地址命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   ip addr</div></pre></td></tr></table></figure></p>
<p>安装telnet客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   yum install telnet</div></pre></td></tr></table></figure></p>
<p>安装telnet服务端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   yum install telnet-server</div></pre></td></tr></table></figure></p>
<p>安装wget<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   yum -y install wget</div></pre></td></tr></table></figure></p>
<p>安装ifconfig<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   yum install net-tools</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx 是一个很牛的高性能Web和反向代理服务器, 它具有很多非常优越的特性:&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://blog.geekap.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="教程" scheme="http://blog.geekap.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="安装" scheme="http://blog.geekap.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="linux" scheme="http://blog.geekap.com/tags/linux/"/>
    
      <category term="Nginx" scheme="http://blog.geekap.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>博客建设分享及博客计划</title>
    <link href="http://blog.geekap.com/2017/01/02/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E5%88%86%E4%BA%AB%E4%BB%A5%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    <id>http://blog.geekap.com/2017/01/02/博客建设分享以及学习规划/</id>
    <published>2017-01-02T09:12:21.000Z</published>
    <updated>2017-03-28T16:57:18.006Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><br><strong>经过几天的折腾，终于把github以及github-pages熟悉了一遍，并且在2017新年第一天成功的把博客系统运行在github-pages上，不枉几天查阅各种资料文档，尝试各种框架、工具、库，虽然探索的过程很艰辛的但最终的的成果令人兴奋，也希望在新的一年技术能有更加精进。</strong></p>
<p>在此贴上几天努力的成果 <a href="http://blog.geekap.com/">http://blog.geekap.com</a></p>
<hr>
<h2 id="一、建站简述"><a href="#一、建站简述" class="headerlink" title="一、建站简述"></a>一、建站简述</h2><p>讲过几天的探索，学习了各种各样的建站方式，也简单尝试了几种，最终决定使用 <strong><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></strong>，官方宣传口号为:<strong>快速、简洁且高效的博客框架</strong><br>拥有以下特点:</p>
<ul>
<li><strong>超快速度</strong><ul>
<li>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>
</ul>
</li>
<li><strong>支持 Markdown</strong><ul>
<li>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>
</ul>
</li>
<li><strong>一键部署</strong><ul>
<li>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li>
</ul>
</li>
<li><strong>丰富的插件</strong><ul>
<li>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li>
</ul>
</li>
</ul>
<p>Hexo不但功能强大，可扩展性强，并且简单易用，只需要电脑中有<strong>nodejs环境</strong>和<strong>git</strong>，接下来只需要简单的输入几条命令你的github-pages博客系统便马上可以线了，是不是心动啦，快来试试吧。</p>
<h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a><strong>二、准备工作</strong></h2><ul>
<li>安装并配置nodejs环境</li>
<li>安装git</li>
<li>拥有github账号，并创建一个名字为username.github.io的仓库，username为你的用户名。</li>
</ul>
<h2 id="三、开始安装"><a href="#三、开始安装" class="headerlink" title="三、开始安装"></a><strong>三、开始安装</strong></h2><p><strong>首先创建一个工程目录，进入根目录输入以下指令：</strong></p>
 <figure class="codeblock codeblock--tabbed"><figcaption><a href="http://blog.geekap.com">Hexo安装</a><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g    #安装Hexo</span><br><span class="line"></span><br><span class="line">$ hexo init    #初始化Hexo</span><br><span class="line">     </span><br><span class="line">$ npm install    #安装所有依赖包 	</span><br><span class="line">      	</span><br><span class="line">$ hexo server    #启动服务</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="四、安装完成–调试"><a href="#四、安装完成–调试" class="headerlink" title="四、安装完成–调试"></a><strong>四、安装完成–调试</strong></h2><p><strong>执行 <code>$ hexo server</code> 后在浏览器中输入<code>localhost:4000</code>映入眼帘的的便是你的博客主页。</strong></p>
<h2 id="五、更改主题"><a href="#五、更改主题" class="headerlink" title="五、更改主题"></a>五、更改主题</h2><ol>
<li>Hexo默认的landscape主题。要是你觉得默认主题不好看，没关系，Hexo官方网站提供多达91款<strong><a href="https://hexo.io/themes/" target="_blank" rel="external">主题</a></strong>，任你挑选。</li>
<li>主题的使用也很简单。在Hexo主题列表选择好心仪的主题后，进入主题的github项目，下载到你的博客目录themes下，或者使用git命令直接克隆到本地。</li>
<li>在博客根目录的<code>_config.yml</code>文件中将theme变量的值更改为新主题文件夹的名字，当然了，主题文件夹名也是可以任意更改的。</li>
<li>然后刷新网页，即可看到属于你炫酷的博客。</li>
</ol>
<h2 id="六、上线到github-pages"><a href="#六、上线到github-pages" class="headerlink" title="六、上线到github-pages"></a>六、上线到github-pages</h2><p>在本地测试成功后，接下来就该把博客上线到github为广大开发者免费提供的静态网页服务器github-pages上了。</p>
<p><strong>1. 首先继续配置<code>_config.yml</code>文件，设置deploy</strong></p>
<pre><code>{% tabbed_codeblock 'Hexo配置' http://blog.geekap.com %}
			<!-- tab yml -->
	deploy:

	type: git

	repo: https://github.com/github用户名/github用户名.github.io
	<!-- endtab -->
	{% endtabbed_codeblock %}
</code></pre><p><strong>2. 安装hexo的git插件</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p><strong>3. 最后输入命令，生成静态网页，并部署到你的github仓库，你即可在浏览器中输入<code>github用户名.github.io</code>访问你的博客了。</strong></p>
<pre><code>{% tabbed_codeblock 'Hexo部署' http://blog.geekap.com %}
			<!-- tab cmd -->
		$ hexo generate    #生成静态页面
		
		$ hexo deploy   #部署网站到你的github仓库，根据_config.yml中repo所填的github地址为准。
	<!-- endtab -->
	{% endtabbed_codeblock %}
</code></pre><p><strong>4. 接下来你需要的做的就是新建一篇文章，并使用markdown编辑器开始你的博客之旅了。</strong></p>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new  &lt;title&gt;    <span class="comment">#title为文章的标题</span></div></pre></td></tr></table></figure>
</code></pre><h2 id="七、markdown编辑器"><a href="#七、markdown编辑器" class="headerlink" title="七、markdown编辑器"></a>七、markdown编辑器</h2><p>经过博主对比几个有名的在线markdown编辑器，推荐使用<strong><a href="https://stackedit.io/" target="_blank" rel="external">StackEditor</a></strong>,当然你要是有更好的选择也可以告诉博主。</p>
<h2 id="八、注意"><a href="#八、注意" class="headerlink" title="八、注意:"></a>八、注意:</h2><p>由于github是国外的服务器，访问较慢，建议将博客的图片放到七牛或者又拍云或者阿里云的OSS上。</p>
<h2 id="九、建站小结"><a href="#九、建站小结" class="headerlink" title="九、建站小结"></a>九、建站小结</h2><p>以上简述了Hexo博客的建设，如若还有不懂请查阅Hexo的<strong><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">官方文档</a></strong>，若是依然无法解决可以联系博主。</p>
<h2 id="十、博客规划"><a href="#十、博客规划" class="headerlink" title="十、博客规划"></a>十、博客规划</h2><p>博客到此就已经建设完成，接下来开始记录学习中遇到的问题，学习技巧，新技术的动态，并分享一些好的想法，还有生活、学习、工作中的一些所见所闻所感。愿大家一起见证我以及我的博客点点滴滴的成长。</p>
<p><img src="http://oj5xzgnkr.bkt.clouddn.com/anzai11.gif" alt="&#39;安仔&#39;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过几天的折腾，终于把github以及github-pages熟悉了一遍，并且在2017新年第一天成功的把博客系统运行在github-pages上,虽然原来的wordpress文章无法在转移，不用担心，一大波好文章正正在来袭。&lt;br&gt;
    
    </summary>
    
      <category term="建站" scheme="http://blog.geekap.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="教程" scheme="http://blog.geekap.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="建站" scheme="http://blog.geekap.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Hexo" scheme="http://blog.geekap.com/tags/Hexo/"/>
    
      <category term="安装" scheme="http://blog.geekap.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="计划" scheme="http://blog.geekap.com/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
</feed>
